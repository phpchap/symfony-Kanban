<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TaskDepartment', 'doctrine');

/**
 * BaseTaskDepartment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $task_id
 * @property integer $department_id
 * @property Task $Task
 * @property Department $Department
 * 
 * @method integer        getTaskId()        Returns the current record's "task_id" value
 * @method integer        getDepartmentId()  Returns the current record's "department_id" value
 * @method Task           getTask()          Returns the current record's "Task" value
 * @method Department     getDepartment()    Returns the current record's "Department" value
 * @method TaskDepartment setTaskId()        Sets the current record's "task_id" value
 * @method TaskDepartment setDepartmentId()  Sets the current record's "department_id" value
 * @method TaskDepartment setTask()          Sets the current record's "Task" value
 * @method TaskDepartment setDepartment()    Sets the current record's "Department" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTaskDepartment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('task_department');
        $this->hasColumn('task_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'length' => 4,
             ));
        $this->hasColumn('department_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Task', array(
             'local' => 'task_id',
             'foreign' => 'id'));

        $this->hasOne('Department', array(
             'local' => 'department_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}